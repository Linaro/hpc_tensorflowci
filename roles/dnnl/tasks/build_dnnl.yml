---
- name: Delete build dirs dnnl
  file:
          path: "{{ item }}"       
          state: absent
  with_items:
          - "{{ dnnl_dir_base }}"
          - "{{ dnnl_dir_src }}"
          - "{{ dnnl_dir_build }}"

- name: Create build dirs dnnl
  file:
          path: "{{ item }}"       
          state: directory
          mode: '0755'
          owner: "{{ user }}"
          group: "{{ user }}"
  with_items:
          - "{{ dnnl_dir_base }}"
          - "{{ dnnl_dir_src }}"
          - "{{ dnnl_dir_build }}"

- name: Create output dir
  shell: "sudo rm -rf {{ dnnl_dir_output }} && sudo mkdir -p {{ dnnl_dir_output }}"  
  args:
          executable: "/bin/bash"

- name: Fetch dnnl release tarball
  get_url:
          url: "{{ dnnl.release_url }}"
          dest: "{{ dnnl_dir_base }}"

- name: Unzip the release
  unarchive:
          src: "{{ dnnl_dir_base }}/{{ dnnl.release_zip }}"
          remote_src: yes
          dest: "{{ dnnl_dir_base }}"
          extra_opts:
            - -o
  
- name: Get the dnnl build scipt
  template:
          src: "build_dnnl.sh.j2"
          dest: "{{ dnnl_dir_build }}/build_dnnl.sh"
          mode: '0755'
          owner: "{{ user }}"
          group: "{{ user }}"

- name: Build dnnl
  shell: "./build_dnnl.sh"
  args:
          chdir: "{{ dnnl_dir_build }}"
          executable: "/bin/bash"
  register: dnnl_build_log
- debug: var=dnnl_build_log

- name: Tar-up dnnl output
  archive:
          path: "{{ dnnl_dir_output }}"
          dest: "{{ dir_built }}/{{ dnnl.built_tarball }}"
          format: gz
